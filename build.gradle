task wrapper(type: Wrapper) {
  gradleVersion = '2.2.1'
}

project('jvm').subprojects {
  // This is all you need for a basic Java project. Everything else after this
  // one line is auxiliary.
  apply plugin: 'java'

  sourceCompatibility = '1.7'
  targetCompatibility = '1.7'

  task sourceJar(type: Jar) {
    description = 'Builds a source JAR artifact suitable for Maven deployment'
    classifier = 'sources'
    from sourceSets.main.java
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    description = 'Builds a Javadoc JAR artifact suitable for Maven deployment'
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  build.dependsOn sourceJar, javadocJar

  artifacts {
    archives sourceJar, javadocJar
  }

  apply plugin: 'eclipse' // Provides tasks for creating an Eclipse project
  apply plugin: 'idea'    // '' for creating an IntelliJ project

  eclipse {
    // Separate Eclipse's build output from Gradle's
    // http://forums.gradle.org/gradle/topics/eclipse_generated_files_should_be_put_in_the_same_place_as_the_gradle_generated_files
    classpath {
      defaultOutputDir = file("$buildDir/eclipse-classes")
    }
  }

  apply plugin: 'maven'

  // Not necessary, but without it the 'install' task will not perform any checks
  // or testing before deploying artifacts to the local Maven repository.
  install.dependsOn build
}

project('jvm:simple-java') {
  description 'A simple Java project'
}

project('jvm:simple-java-dependent') {
  description 'A simple Java project that depends on another'

  dependencies {
    compile project(':jvm:simple-java')
  }
}

project('jvm:jni') {
  description 'A Java project that uses JNI'

  def nativeHeadersDir = file("$buildDir/nativeHeaders")

  task nativeHeaders {
    def outputFile = file("$nativeHeadersDir/native.h")
    inputs.files sourceSets.main.output
    outputs.file outputFile
    doLast {
      outputFile.parentFile.mkdirs()
      exec {
        executable org.gradle.internal.jvm.Jvm.current().getExecutable('javah')
          args '-o', outputFile
          args '-classpath', sourceSets.main.output.classesDir
          args 'example.jni.Util'
      }
    }
  }

  apply plugin: 'c'

  libraries {
    jniPlatform {
      baseName 'native'
      targetPlatforms 'linux_amd64'
    }
    all {
      binaries.all {
        if (targetPlatform.operatingSystem.linux) {
          cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
          cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
        }
        cCompiler.args "-I${nativeHeadersDir}"
      }
    }
  }

  sources {
    jniPlatform {
      c {
        source {
          srcDirs 'src/main/c'
          include '**/*.c' // Ignore .swp files (useful if using Vim, etc.)
        }
      }
    }
  }

  model {
    platforms {
      linux_amd64 {
        architecture 'amd64'
        operatingSystem 'linux'
      }
    }
  }
  tasks.withType(CCompile) {task -> task.dependsOn nativeHeaders}
}
